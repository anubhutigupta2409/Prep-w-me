What is the worst case time complexity of the following code :

/* 
 * V is sorted 
 * V.size() = N
 * The function is initially called as searchNumOccurrence(V, k, 0, N-1)
 */
int searchNumOccurrence(vector<int> &V, int k, int start, int end) {
    if (start > end) return 0;
    int mid = (start + end) / 2;
    if (V[mid] < k) return searchNumOccurrence(V, k, mid + 1, end);
    if (V[mid] > k) return searchNumOccurrence(V, k, start, mid - 1);
    return searchNumOccurrence(V, k, start, mid - 1) + 1 + searchNumOccurrence(V, k, mid + 1, end);
}

Select your answer from the following options:
O(sqrt N)
O(log N)
O(log^2 N )
O(N) <-- ANSWER
O(N * log N)
O(N * sqrt N)

EXPLANATION -->
the function is looking for all the occurrences of K. If K appears once int the array, it’s log(n). But since they ask for worst
case, we will look at all the elements, making it O(n)
If it was just a normal binary search then it would have been log n but as the middle case is absent the loop will run n times in the worst case.